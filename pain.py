"""
Pain - –ú–æ–¥—É–ª—å –±–æ–ª–µ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å—Ç—Ä–µ—Å—Å–∞ –¥–ª—è LE

–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞, —Å—Ç—Ä–µ—Å—Å–∞
–∏ –±–æ–ª–µ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é LE —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.
"""

import time
import random
import math
from typing import Dict, Tuple, Optional, List


class Pain:
    """–ú–æ–¥—É–ª—å –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª–µ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å—Ç—Ä–µ—Å—Å–∞, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–µ–π."""
    
    def __init__(self, threshold: float = 0.6, decay_rate: float = 0.85, sensitivity: float = 0.3):
        self.pain_level = 0.0  # –£—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏ (0-1)
        self.threshold = threshold  # –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–ª–∏
        self.decay_rate = decay_rate  # –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è –±–æ–ª–∏
        self.sensitivity = sensitivity  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å—É
        self.last_trigger = time.time()
        self.stress_history = []  # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        self.chronic_pain = 0.0  # –•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
        
    def analyze_message_stress(self, user_message: str) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not user_message:
            return 0.1
            
        stress_indicators = [
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞/—Å–∏–º–≤–æ–ª—ã
            user_message.count('!') * 0.1,
            user_message.count('?') * 0.05,
            len([c for c in user_message if c.isupper()]) / max(len(user_message), 1) * 0.3,
            
            # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
            sum(0.15 for word in ['hate', 'angry', 'frustrated', 'annoyed', 'pissed', '–±–ª—è—Ç—å', '—Å—É–∫–∞', '–ø–∏–∑–¥–µ—Ü']
                if word.lower() in user_message.lower()),
            
            # –î–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            sum(0.1 for word in ['must', 'should', 'need', '—Ç—Ä–µ–±—É—é', '–Ω–∞–¥–æ', '–¥–æ–ª–∂–µ–Ω']
                if word.lower() in user_message.lower()),
            
            # –ö—Ä–∏—Ç–∏–∫–∞ –∏ –Ω–µ–≥–∞—Ç–∏–≤
            sum(0.12 for word in ['wrong', 'bad', 'terrible', 'awful', 'stupid', '–ø–ª–æ—Ö–æ', '—Ö—É–µ–≤–æ', '—Ç—É–ø–æ']
                if word.lower() in user_message.lower()),
            
            # –í—Ä–µ–º—è/–¥–µ–¥–ª–∞–π–Ω—ã
            sum(0.08 for word in ['urgent', 'now', 'immediately', '–±—ã—Å—Ç—Ä–æ', '—Å—Ä–æ—á–Ω–æ', '—Å–µ–π—á–∞—Å']
                if word.lower() in user_message.lower()),
        ]
        
        # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è = –±–æ–ª—å—à–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        length_stress = min(len(user_message) / 500, 0.2)
        
        total_stress = sum(stress_indicators) + length_stress
        return min(total_stress, 1.0)
    
    def calculate_system_stress(self, generation_failures: int = 0, 
                              processing_time: float = 0.0,
                              memory_pressure: float = 0.0) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç—Ä–µ—Å—Å –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤."""
        system_stress = 0.0
        
        # –°—Ç—Ä–µ—Å—Å –æ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if generation_failures > 0:
            system_stress += min(generation_failures * 0.2, 0.6)
        
        # –°—Ç—Ä–µ—Å—Å –æ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if processing_time > 2.0:  # –ë–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥
            system_stress += min((processing_time - 2.0) / 5.0, 0.3)
        
        # –°—Ç—Ä–µ—Å—Å –æ—Ç –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        system_stress += memory_pressure * 0.2
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä–µ—Å—Å (—É—Å—Ç–∞–ª–æ—Å—Ç—å)
        current_time = time.time()
        time_since_last = current_time - self.last_trigger
        if time_since_last < 5.0:  # –ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            system_stress += 0.1
        
        return min(system_stress, 1.0)
    
    def trigger(self, user_message: str, system_factors: Dict = None) -> Dict[str, float]:
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ–ª–µ–≤–æ–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_factors: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å—Ç—Ä–µ—Å—Å–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ–ª–∏ –∏ —Å—Ç—Ä–µ—Å—Å–µ
        """
        current_time = time.time()
        time_delta = current_time - self.last_trigger
        
        # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –±–æ–ª–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        if time_delta > 10:  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            self.pain_level *= self.decay_rate
            self.chronic_pain *= 0.98  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –∑–∞—Ç—É—Ö–∞–µ—Ç
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–µ—Å—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_stress = self.analyze_message_stress(user_message)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç—Ä–µ—Å—Å
        system_factors = system_factors or {}
        system_stress = self.calculate_system_stress(
            generation_failures=system_factors.get('failures', 0),
            processing_time=system_factors.get('processing_time', 0.0),
            memory_pressure=system_factors.get('memory_pressure', 0.0)
        )
        
        # –û–±—â–∏–π —Å—Ç—Ä–µ—Å—Å
        total_stress = message_stress + system_stress * 0.7
        
        # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —à—É–º
        neural_noise = random.uniform(-0.03, 0.03)
        stress_with_noise = max(0.0, total_stress + neural_noise)
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–ª–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
        pain_triggered = False
        if stress_with_noise > self.threshold:
            pain_increase = (stress_with_noise - self.threshold) * self.sensitivity
            old_pain = self.pain_level
            self.pain_level = min(self.pain_level + pain_increase, 1.0)
            pain_triggered = self.pain_level > old_pain + 0.1
            
            # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ö—Ä–æ–Ω–∏—á–µ—Å–∫—É—é –±–æ–ª—å –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
            if pain_triggered:
                self.chronic_pain = min(self.chronic_pain + 0.05, 0.4)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.stress_history.append({
            'time': current_time,
            'message_stress': message_stress,
            'system_stress': system_stress,
            'pain_level': self.pain_level,
            'triggered': pain_triggered
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.stress_history = self.stress_history[-20:]
        self.last_trigger = current_time
        
        return {
            'pain_level': self.pain_level,
            'chronic_pain': self.chronic_pain,
            'message_stress': message_stress,
            'system_stress': system_stress,
            'total_stress': total_stress,
            'pain_triggered': pain_triggered,
            'time_since_last': time_delta
        }
    
    def relieve(self, relief_source: str = 'natural', relief_strength: float = 0.3) -> float:
        """
        –°–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∏–ª–æ–π –æ–±–ª–µ–≥—á–µ–Ω–∏—è.
        
        Args:
            relief_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–ª–µ–≥—á–µ–Ω–∏—è ('natural', 'positive_feedback', 'success')
            relief_strength: –°–∏–ª–∞ –æ–±–ª–µ–≥—á–µ–Ω–∏—è (0-1)
            
        Returns:
            float: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏
        """
        # –†–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        if relief_source == 'positive_feedback':
            # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            relief_strength *= 1.2
        elif relief_source == 'success':
            # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            relief_strength *= 0.8
        elif relief_source == 'natural':
            # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            relief_strength *= 1.0
        
        old_pain = self.pain_level
        self.pain_level = max(0.0, self.pain_level - relief_strength)
        
        # –•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å —É—Ö–æ–¥–∏—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ
        if self.pain_level < 0.2:
            self.chronic_pain = max(0.0, self.chronic_pain - relief_strength * 0.3)
        
        relief_amount = old_pain - self.pain_level
        
        
        return self.pain_level
    
    def modulate_generation_params(self, base_max_tokens: int = 15, 
                                 base_temperature: float = 0.8) -> Tuple[int, float, str]:
        """
        –ú–æ–¥—É–ª–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏.
        
        Returns:
            (max_tokens, temperature, prefix_emoji)
        """
        total_discomfort = self.pain_level + self.chronic_pain
        
        # –≠–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ–ª–∏
        if total_discomfort > 0.8:
            prefix = ""
            # –ë–æ–ª—å –¥–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∫–æ—Ä–æ—á–µ –∏ –±–æ–ª–µ–µ –Ω–µ—Ä–≤–Ω—ã–º–∏
            multiplier = 0.6
            temp_change = 0.3  # –ë–æ–ª–µ–µ —Ö–∞–æ—Ç–∏—á–Ω–æ –æ—Ç –±–æ–ª–∏
            
        elif total_discomfort > 0.5:
            prefix = "üòü"  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –±–æ–ª—å - –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ
            multiplier = 0.8
            temp_change = 0.15
            
        elif total_discomfort > 0.2:
            prefix = "üòï"  # –õ–µ–≥–∫–∏–π –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç
            multiplier = 0.9
            temp_change = 0.05
            
        else:
            prefix = ""  # –ë–µ–∑ –±–æ–ª–∏ - –±–µ–∑ —ç–º–æ–¥–∂–∏
            multiplier = 1.0
            temp_change = 0.0
        
        max_tokens = max(int(base_max_tokens * multiplier), 3)
        temperature = max(0.3, min(base_temperature + temp_change, 1.2))
        
        return max_tokens, temperature, prefix
    
    def get_pain_insights(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –æ –±–æ–ª–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö."""
        if not self.stress_history:
            return {'avg_stress': 0.0, 'pain_episodes': 0, 'trend': 'stable'}
        
        recent = [s for s in self.stress_history if time.time() - s['time'] < 300]  # 5 –º–∏–Ω—É—Ç
        
        if recent:
            avg_stress = sum(s['message_stress'] + s['system_stress'] for s in recent) / len(recent)
            pain_episodes = sum(1 for s in recent if s['triggered'])
            
            # –¢—Ä–µ–Ω–¥ –±–æ–ª–∏
            if len(recent) >= 3:
                recent_pain = [s['pain_level'] for s in recent[-3:]]
                trend = 'rising' if recent_pain[-1] > recent_pain[0] else 'falling'
            else:
                trend = 'stable'
        else:
            avg_stress = 0.0
            pain_episodes = 0
            trend = 'stable'
        
        return {
            'avg_stress': avg_stress,
            'pain_episodes': pain_episodes,
            'trend': trend,
            'chronic_level': self.chronic_pain,
            'current_pain': self.pain_level
        }
    
    def reset(self):
        """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–æ–ª–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        self.pain_level = 0.0
        self.chronic_pain = 0.0
        self.last_trigger = time.time()
        self.stress_history.clear()

    
    def get_state(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return {
            'pain_level': self.pain_level,
            'chronic_pain': self.chronic_pain,
            'last_trigger': self.last_trigger,
            'stress_events': len(self.stress_history),
            'insights': self.get_pain_insights()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_pain_instance: Optional[Pain] = None


def get_pain_system() -> Pain:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Pain (singleton)."""
    global _pain_instance
    if _pain_instance is None:
        _pain_instance = Pain()
    return _pain_instance


def trigger_pain(user_message: str, system_factors: Dict = None) -> Dict[str, any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–ª–∏."""
    pain = get_pain_system()
    result = pain.trigger(user_message, system_factors)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—É—é –±–æ–ª—å
    if result['pain_triggered']:
        pass
    
    return result


def relieve_pain(source: str = 'natural', strength: float = 0.3) -> float:
    """–û–±–ª–µ–≥—á–∞–µ—Ç –±–æ–ª—å."""
    pain = get_pain_system()
    return pain.relieve(source, strength)


def modulate_by_pain(base_max_tokens: int = 15, base_temperature: float = 0.8) -> Tuple[int, float, str]:
    """–ú–æ–¥—É–ª–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–æ–ª–∏."""
    pain = get_pain_system()
    return pain.modulate_generation_params(base_max_tokens, base_temperature)


# –ñ–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–ª–∏ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –Ω–µ—Ä–≤–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
